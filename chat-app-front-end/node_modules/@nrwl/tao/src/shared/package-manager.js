"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageManagerCommand = exports.detectPackageManager = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
function detectPackageManager(dir = '') {
    return fs_1.existsSync(path_1.join(dir, 'yarn.lock'))
        ? 'yarn'
        : fs_1.existsSync(path_1.join(dir, 'pnpm-lock.yaml'))
            ? 'pnpm'
            : 'npm';
}
exports.detectPackageManager = detectPackageManager;
function getPackageManagerCommand(packageManager = detectPackageManager()) {
    switch (packageManager) {
        case 'yarn':
            return {
                install: 'yarn',
                add: 'yarn add',
                addDev: 'yarn add -D',
                rm: 'yarn rm',
                exec: 'yarn',
                run: (script, args) => `yarn ${script} ${args}`,
                list: 'yarn list',
            };
        case 'pnpm':
            return {
                install: 'pnpm install --no-frozen-lockfile',
                add: 'pnpm add',
                addDev: 'pnpm add -D',
                rm: 'pnpm rm',
                exec: 'pnpx',
                run: (script, args) => `pnpm run ${script} -- ${args}`,
                list: 'pnpm ls --depth 100',
            };
        case 'npm':
            return {
                install: 'npm install --legacy-peer-deps',
                add: 'npm install --legacy-peer-deps',
                addDev: 'npm install --legacy-peer-deps -D',
                rm: 'npm rm',
                exec: 'npx',
                run: (script, args) => `npm run ${script} -- ${args}`,
                list: 'npm ls',
            };
    }
}
exports.getPackageManagerCommand = getPackageManagerCommand;
//# sourceMappingURL=package-manager.js.map