import { BuilderOutput } from '@angular-devkit/architect';
import { Path, virtualFs } from '@angular-devkit/core';
import { GenerateOptions } from './generate';
import { Tree } from '../shared/tree';
import { FileBuffer } from '@angular-devkit/core/src/virtual-fs/host/interface';
import { Observable } from 'rxjs';
export declare function scheduleTarget(root: string, opts: {
    project: string;
    target: string;
    configuration: string;
    runOptions: any;
}, verbose: boolean): Promise<Observable<BuilderOutput>>;
export declare class NxScopedHost extends virtualFs.ScopedHost<any> {
    constructor(root: Path);
    read(path: Path): Observable<FileBuffer>;
    write(path: Path, content: FileBuffer): Observable<void>;
    isFile(path: Path): Observable<boolean>;
    exists(path: Path): Observable<boolean>;
    workspaceConfigName(): Promise<string>;
    private context;
}
/**
 * This host contains the workaround needed to run Angular migrations
 */
export declare class NxScopedHostForMigrations extends NxScopedHost {
    constructor(root: Path);
    read(path: Path): Observable<FileBuffer>;
    write(path: Path, content: FileBuffer): Observable<void>;
    protected isWorkspaceConfig(path: Path): boolean;
}
export declare function generate(root: string, opts: GenerateOptions, verbose: boolean): Promise<number>;
export declare function runMigration(root: string, collection: string, schematic: string, isVerbose: boolean): Promise<any>;
export declare function wrapAngularDevkitSchematic(collectionName: string, generatorName: string): (host: Tree, generatorOptions: {
    [k: string]: any;
}) => Promise<void>;
export declare function invokeNew(root: string, opts: GenerateOptions, verbose: boolean): Promise<number>;
export declare const getLogger: (isVerbose?: boolean) => any;
