"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.workspaceSchematic = exports.workspaceGenerator = exports.DEFAULT_NRWL_PRETTIER_CONFIG = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const versions_1 = require("../../utils/versions");
const fs_1 = require("fs");
const path_1 = require("path");
exports.DEFAULT_NRWL_PRETTIER_CONFIG = {
    singleQuote: true,
};
const decorateAngularClI = (host) => {
    const decorateCli = fs_1.readFileSync(path_1.join(__dirname, '..', 'utils', 'decorate-angular-cli.js__tmpl__')).toString();
    host.write('decorate-angular-cli.js', decorateCli);
};
function setWorkspaceLayoutProperties(tree, options) {
    devkit_1.updateJson(tree, 'nx.json', (json) => {
        if (options.layout === 'packages') {
            json.workspaceLayout = {
                appsDir: 'packages',
                libsDir: 'packages',
            };
        }
        return json;
    });
}
function createAppsAndLibsFolders(host, options) {
    if (options.layout === 'packages') {
        host.write('packages/.gitkeep', '');
    }
    else {
        host.write('apps/.gitkeep', '');
        host.write('libs/.gitkeep', '');
    }
}
function createFiles(host, options) {
    const npmScope = options.npmScope ? options.npmScope : options.name;
    const formattedNames = devkit_1.names(options.name);
    devkit_1.generateFiles(host, path_1.join(__dirname, './files'), '', Object.assign(Object.assign({ formattedNames, dot: '.', tmpl: '', workspaceFile: options.cli === 'angular' ? 'angular' : 'workspace', cliCommand: options.cli === 'angular' ? 'ng' : 'nx', nxCli: false, typescriptVersion: versions_1.typescriptVersion,
        prettierVersion: versions_1.prettierVersion,
        // angular cli is used only when workspace schematics is added to angular cli
        angularCliVersion: versions_1.angularCliVersion }, options), { nxVersion: versions_1.nxVersion,
        npmScope }));
}
function createPrettierrc(host) {
    devkit_1.writeJson(host, '.prettierrc', exports.DEFAULT_NRWL_PRETTIER_CONFIG);
}
function workspaceGenerator(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!options.name) {
            throw new Error(`Invalid options, "name" is required.`);
        }
        createFiles(host, options);
        createPrettierrc(host);
        if (options.cli === 'angular') {
            decorateAngularClI(host);
        }
        setWorkspaceLayoutProperties(host, options);
        createAppsAndLibsFolders(host, options);
        yield devkit_1.formatFiles(host);
    });
}
exports.workspaceGenerator = workspaceGenerator;
exports.workspaceSchematic = devkit_1.convertNxGenerator(workspaceGenerator);
//# sourceMappingURL=workspace.js.map